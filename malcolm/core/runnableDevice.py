from command import command
from device import DState, DEvent, Device


class RunnableDevice(Device):

    def __init__(self, name):
        # superclass init
        super(RunnableDevice, self).__init__(name)

        # some shortcuts for the state table
        do, t, s, e = self.shortcuts()

        # Error condition generated by device
        t(s,             e.Error,     do.error,     s.Fault)
        # Normal operations
        t(s.Fault,       e.Reset,     do.reset,     s.Fault, s.Idle)
        t(s.Idle,        e.Config,    do.config,    s.Configuring)
        t(s.Configuring, e.ConfigSta, do.configsta, s.Configuring, s.Ready)
        t(s.Ready,       e.Config,    do.config,    s.Configuring)
        t(s.Ready,       e.Run,       do.run,       s.Running)
        t(s.Running,     e.RunSta,    do.runsta,    s.Idle, s.Ready, s.Running)
        # Abort
        t(s.abortable(), e.Abort,     do.abort,     s.Idle)

    def do_reset(self, event):
        raise NotImplementedError

    def do_config(self, event, **config_params):
        raise NotImplementedError

    def do_configsta(self, event, configsta):
        raise NotImplementedError

    def do_run(self, event):
        raise NotImplementedError

    def do_runsta(self, event, runsta):
        raise NotImplementedError

    def do_abort(self, event):
        raise NotImplementedError

    def assert_valid(self):
        """You need to implement this and take arguments and defaults that
        match with self.attributes"""
        raise NotImplementedError

    @command(only_in=DState.abortable())
    def abort(self):
        """Abort the current operation. Will block until the device is in
        a rest state.
        """
        self.post(DEvent.Abort)
        self.wait_for_transition(DState.rest())

    @command(only_in=DState.Fault)
    def reset(self):
        """Try to reset the device into Idle state. Will block until the device
        is in a rest state.
        """
        self.post(DEvent.Reset)
        self.wait_for_transition(DState.rest())

    @command(only_in=DState.configurable(), args_from=assert_valid)
    def configure(self, **params):
        """Configure the device using the supplied parameters. Will block until
        the device is in a rest state.
        """
        self.post(DEvent.Config, **params)
        self.wait_for_transition(DState.rest())

    @command(only_in=DState.runnable())
    def run(self):
        """Start the device running. Will block until the device is in a rest
        state.
        """
        self.post(DEvent.Run)
        self.wait_for_transition(DState.rest())

    @command(only_in=DState, args_from=assert_valid)
    def configure_run(self, **params):
        """Do a reset() or abort() to get into a configurable state, then
        configure(**params) followed by a run(). Will block until error or
        until run() completes.
        """
        # If we are in fault state try a reset to get us back to Idle
        if self.state == DState.Fault:
            self.reset()
        # If we aren't configurable now, abort the last operation so we will be
        elif self.state not in DState.configurable():
            self.abort()
        # If we are now configurable then do a configure
        if self.state in DState.configurable():
            self.configure(**params)
            # And now if we are runnable then do a run
            if self.state == DState.Ready:
                self.run()
